import { useState } from "react";
import { generatePitch } from "../services/geminiService";
import { db, auth } from "../services/firebase";
import { addDoc, collection } from "firebase/firestore";

export default function PitchForm() {
  const [idea, setIdea] = useState("");
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);

  async function handleSubmit(e) {
    e.preventDefault();
    if (!idea.trim()) {
      setError("Please enter your startup idea first!");
      return;
    }
    
    console.log("Form submitted with idea:", idea);
    setLoading(true);
    setError(null);
    setResult(null);
    
    try {
      console.log("Calling generatePitch function...");
      const res = await generatePitch(idea);
      console.log("Received response:", res);
      
      if (res.error) {
        console.error("API returned error:", res.error);
        setError(res.error);
        setResult(null);
      } else {
        console.log("Setting result:", res);
        console.log("Result option1:", res.option1);
        console.log("Result option2:", res.option2);
        console.log("Result option3:", res.option3);
        setResult(res);
        setError(null);
        
        // Save to Firebase
        if (auth.currentUser) {
          console.log("Saving to Firebase...");
          console.log("User UID:", auth.currentUser.uid);
          console.log("Result to save:", res);
          
          const pitchData = {
            uid: auth.currentUser.uid,
            originalIdea: idea,
            option1: res.option1 || { name: "Option 1", tagline: "Tagline 1" },
            option2: res.option2 || { name: "Option 2", tagline: "Tagline 2" },
            option3: res.option3 || { name: "Option 3", tagline: "Tagline 3" },
            pitch: res.pitch || "No Pitch",
            audience: res.audience || "General Audience",
            landingText: res.landingText || "No Landing Text",
            createdAt: new Date(),
          };
          
          console.log("Pitch data to save:", pitchData);
          
          const docRef = await addDoc(collection(db, "pitches"), pitchData);
          console.log("Saved to Firebase successfully with ID:", docRef.id);
        }
      }
    } catch (err) {
      console.error("Submit error:", err);
      setError("Something went wrong. Please try again! Error: " + err.message);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="max-w-2xl mx-auto mt-10 bg-gray-900 p-6 rounded-xl shadow-lg">
      <h2 className="text-2xl font-bold text-purple-400 mb-2">
        IB-PitchCraft - AI Startup Pitch Generator
      </h2>
      <p className="text-gray-400 text-sm mb-6">
        Enter your startup idea and get a professional pitch generated by AI
      </p>
      
      <form onSubmit={handleSubmit}>
        <textarea
          placeholder="Describe your startup idea... (e.g., 'I want to build an app that connects students with mentors')"
          className="w-full p-4 rounded-lg bg-gray-800 border border-gray-700 focus:border-purple-500 focus:outline-none mb-4 h-32 resize-none text-white placeholder-gray-400"
          value={idea}
          onChange={(e) => setIdea(e.target.value)}
          disabled={loading}
        />
        
        <button
          disabled={loading || !idea.trim()}
          className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed px-6 py-3 rounded-lg font-medium transition-colors"
        >
          {loading ? "Generating Pitch..." : "Generate Pitch"}
        </button>
      </form>

      {error && (
        <div className="mt-4 p-4 bg-red-900 border border-red-700 rounded-lg">
          <p className="text-red-300">{error}</p>
        </div>
      )}

      {/* Success message */}
      {result && (
        <div className="mt-4 p-4 bg-green-900 border border-green-700 rounded-lg">
          <p className="text-green-300">Pitch generated successfully! Saved to your dashboard.</p>
        </div>
      )}

      {result && (
        <div className="mt-6 bg-gradient-to-br from-gray-800 to-gray-900 p-6 rounded-xl border border-gray-700">
          {/* Business Name */}
          <div className="mb-6">
            <h3 className="text-xl text-purple-300 font-bold mb-4">Business Name:</h3>
            <div className="bg-gray-700 p-6 rounded-lg border border-gray-600">
              <h4 className="text-white font-semibold text-2xl mb-2">{result.option1?.name || "Business Name"}</h4>
              <p className="text-purple-200 italic text-lg">{result.option1?.tagline || "Business Tagline"}</p>
            </div>
          </div>
          
          <div className="space-y-4">
            <div>
              <h4 className="text-white font-semibold mb-2">What Problem Does It Solve?</h4>
              <p className="text-gray-300 text-lg leading-relaxed">{result.pitch}</p>
            </div>
            
            <div>
              <h4 className="text-white font-semibold mb-2">Who Will Buy This?</h4>
              <p className="text-gray-400 text-lg">{result.audience}</p>
            </div>
            
            <div>
              <h4 className="text-white font-semibold mb-2">Why Should Customers Care?</h4>
              <p className="text-gray-300 text-lg">{result.landingText}</p>
            </div>
          </div>
          
          <div className="mt-4 pt-4 border-t border-gray-700">
            <p className="text-xs text-gray-500">
              Generated by AI â€¢ Save successful
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
